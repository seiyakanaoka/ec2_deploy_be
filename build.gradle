import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
  id 'org.springframework.boot' version '3.2.0'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'org.jetbrains.kotlin.jvm' version '1.9.20'
  id 'org.jetbrains.kotlin.plugin.spring' version '1.9.20'
  id 'org.flywaydb.flyway' version "8.2.0"
  id "org.openapi.generator" version "6.2.0"
}

apply plugin: 'kotlin-kapt'

// コンパイルより前にSQLファイルを出力先ディレクトリにコピーするために依存関係を逆転する
compileJava.dependsOn processResources

// SQLファイルなどリソースファイルの出力先ディレクトリをkaptに伝える
kapt {
  arguments {
    arg("doma.resources.dir", processResources.destinationDir)
  }
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = '17'
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
  implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
  implementation 'org.jetbrains.kotlin:kotlin-reflect'
  implementation "org.springdoc:springdoc-openapi-ui:1.5.5"
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'com.mysql:mysql-connector-j'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  compileOnly("org.projectlombok:lombok")
  annotationProcessor("org.projectlombok:lombok")
  kapt 'org.seasar.doma:doma-processor:2.53.1'
  implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.7.0'
  implementation 'org.flywaydb:flyway-mysql:8.2.1'
}

tasks.withType(KotlinCompile) {
  kotlinOptions {
    freeCompilerArgs += '-Xjsr305=strict'
    jvmTarget = '17'
  }
}

tasks.named('test') {
  useJUnitPlatform()
}

// flywayがmysqlに接続する際の接続情報
flyway {
  url = "jdbc:mysql://127.0.0.1:3306/db"
  user = "root"
  password = "mysql"
}

openApiGenerate {
  generatorName = "kotlin-spring"
  inputSpec = "${rootDir}/ci-cd-swagger/openapi.yaml"
  outputDir = "${rootDir}/src/main/kotlin/com/example/project/common/openapi"
  modelPackage = "openapi.model"
  apiPackage = "openapi.api"
  templateDir = "${rootDir}/ci-cd-swagger/templates"
  configOptions = [
          generateSchema: "false",
  ]
  additionalProperties = [
          interfaceOnly : true,
          skipDefaultInterface: true,
  ]
}

tasks.named('openApiGenerate') {
  doLast {
    // readme.md ファイルのパスを指定
    def filesToDelete = [
            "${rootDir}/src/main/kotlin/com/example/project/common/openapi/README.md",
            "${rootDir}/src/main/kotlin/com/example/project/common/openapi/pom.xml",
            "${rootDir}/src/main/kotlin/com/example/project/common/openapi/build.gradle.kts",
            "${rootDir}/src/main/kotlin/com/example/project/common/openapi/settings.gradle",
            "${rootDir}/src/main/kotlin/com/example/project/common/openapi/settings.gradle",
            "${rootDir}/src/main/kotlin/com/example/project/common/openapi/src/main/kotlin/openapi/api/ApiUtil.kt",
            "${rootDir}/src/main/kotlin/com/example/project/common/openapi/src/main/kotlin/openapi/api/Exceptions.kt",
    ]

    // 各ファイルを削除
    filesToDelete.each { filePath ->
      def file = file(filePath)
      if (file.exists()) {
        file.delete()
        println "${filePath} deleted"
      } else {
        println "${filePath} not found"
      }
    }
  }
}

compileJava.dependsOn tasks.openApiGenerate
